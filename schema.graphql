type Token @entity {
  id: ID!
  symbol: String!
  name: String!
  decimals: BigInt!
}

type ACOToken @entity {
  id: ID!
  underlying: Token!
  strikeAsset: Token!
  collateral: Token!
  symbol: String!
  name: String!
  decimals: BigInt!
  isCall: Boolean!
  strikePrice: BigDecimal!
  expiryTime: BigInt!
  totalSupply: BigDecimal!
  fee: BigDecimal!
  feeDestination: Bytes!
  maxExercisedAccounts: BigInt
  creator: Bytes
  implementation: Bytes!
  situation: ACOTokenSituation!
  tx: Transaction!
  mintsCount: BigInt!
  burnsCount: BigInt!
  exercisesCount: BigInt!
  accountsCount: BigInt!
  swapsCount: BigInt!
  mints: [Mint!]! @derivedFrom(field: "aco")
  burns: [Burn!]! @derivedFrom(field: "aco")
  exercises: [Exercise!]! @derivedFrom(field: "aco")
  accounts: [ACOAccount!]! @derivedFrom(field: "aco")
  swaps: [ACOSwap!]! @derivedFrom(field: "aco")
}

type ACOTokenSituation @entity {
  id: ID!
  collateralizedTokens: BigDecimal!
  assignableTokens: BigDecimal!
  unassignableTokens: BigDecimal!
  collateralAmount: BigDecimal!
  assignableCollateral: BigDecimal!
  unassignableCollateral: BigDecimal!
  exercisedTokens: BigDecimal!
  exercisedPayment: BigDecimal!
  exerciseFee: BigDecimal!
}

type Mint @entity {
  id: ID!
  aco: ACOToken!
  account: Bytes!
  collateralAmount: BigDecimal!
  tokenAmount: BigDecimal!
  tx: Transaction!
}

type Burn @entity {
  id: ID!
  aco: ACOToken!
  account: Bytes!
  collateralAmount: BigDecimal!
  tokenAmount: BigDecimal!
  tx: Transaction!
}

type Exercise @entity {
  id: ID!
  aco: ACOToken!
  account: Bytes!
  paidAmount: BigDecimal!
  tokenAmount: BigDecimal!
  tx: Transaction!
  exercisedAccountsCount: BigInt!
  exercisedAccounts: [ExercisedAccount!]! @derivedFrom(field: "exercise")
}

type ExercisedAccount @entity {
  id: ID!
  exercise: Exercise!
  account: Bytes!
  paymentReceived: BigDecimal!
  exercisedTokens: BigDecimal!
}

type ACOAccount @entity {
  id: ID!
  account: Bytes!
  aco: ACOToken!
  balance: BigDecimal!
  situation: ACOTokenSituation!
}

type ACOSwap @entity {
  id: ID!
  aco: ACOToken!
  seller: Bytes!
  buyer: Bytes!
  taker: Bytes!
  type: SwapType!
  paymentToken: Token!
  paymentAmount: BigDecimal!
  acoAmount: BigDecimal!
  tx: Transaction!
}

enum SwapType {
  ZRX
  Pool
  OTC
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  block: BigInt!
}

type ACOPoolFactory2 @entity {
  id: ID!
}

type ACOPool2 @entity {
  id: ID!
  underlying: Token!
  strikeAsset: Token!
  collateral: Token!
  symbol: String!
  name: String!
  decimals: BigInt!
  isCall: Boolean!
  totalSupply: BigDecimal!
  tx: Transaction!
  implementation: Bytes!
  gasToken: Bytes!
  strategy: Bytes!
  baseVolatility: BigDecimal!
  tolerancePriceBelowMin: BigDecimal!
  tolerancePriceBelowMax: BigDecimal!
  tolerancePriceAboveMin: BigDecimal!
  tolerancePriceAboveMax: BigDecimal!
  minExpiration: BigInt!
  maxExpiration: BigInt!
  withdrawOpenPositionPenalty: BigDecimal!
  underlyingPriceAdjustPercentage: BigDecimal!
  fee: BigDecimal!
  maximumOpenAco: BigInt!
  feeDestination: Bytes!
  assetConverter: Bytes!
  poolAdmin: Bytes
  lendingPool: Bytes
  lendingPoolReferral: BigInt
  openAcosCount: BigInt!
  holdersCount: BigInt!
  acosCount: BigInt!
  acoCreatorsPermissionCount: BigInt!
  swapsCount: BigInt!
  depositsCount: BigInt!
  withdrawalsCount: BigInt!
  acoRedeemsCount: BigInt!
  collateralRestoresCount: BigInt!
  accountsCount: BigInt!
  acos: [ACOOnPool!]! @derivedFrom(field: "pool")
  acoCreatorsPermission: [ACOCreatorPermission!]! @derivedFrom(field: "pool")
  swaps: [PoolSwap!]! @derivedFrom(field: "pool")
  deposits: [Deposit!]! @derivedFrom(field: "pool")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "pool")
  acoRedeems: [ACORedeem!]! @derivedFrom(field: "pool")
  collateralRestores: [CollateralRestore!]! @derivedFrom(field: "pool")
  accounts: [PoolAccount!]! @derivedFrom(field: "pool")
}

type ACOOnPool @entity {
  id: ID!
  pool: ACOPool2!
  aco: ACOToken!
  isOpen: Boolean!
  acoAmount: BigDecimal!
  valueSold: BigDecimal!
  collateralLocked: BigDecimal!
  collateralRedeemed: BigDecimal!
}

type ACOCreatorPermission @entity {
  id: ID!
  pool: ACOPool2!
  creator: Bytes!
  isValid: Boolean!
  isForbidden: Boolean!
}

type PoolSwap @entity {
  id: ID!
  pool: ACOPool2!
  aco: ACOToken!
  account: Bytes!
  tx: Transaction!
  acoAmount: BigDecimal! 
  paymentAmount: BigDecimal! 
  protocolFee: BigDecimal! 
  underlyingPrice: BigDecimal!
	volatility: BigDecimal!
}

type Deposit @entity {
  id: ID!
  pool: ACOPool2!
  account: Bytes!
  tx: Transaction!
  shares: BigDecimal!
  collateralAmount: BigDecimal!
}

type Withdrawal @entity {
  id: ID!
  pool: ACOPool2!
  account: Bytes!
  tx: Transaction!
  shares: BigDecimal!
	noLocked: Boolean! 
  underlyingWithdrawn: BigDecimal!
  strikeAssetWithdrawn: BigDecimal!
  openAcosCount: BigInt!
  openAcos: [ACOAmount!]! @derivedFrom(field: "withdrawal")
}

type ACOAmount @entity {
  id: ID!
  withdrawal: Withdrawal!
  aco: ACOToken!
  amount: BigDecimal!
}

type ACORedeem @entity {
  id: ID!
  pool: ACOPool2!
  aco: ACOToken!
  caller: Bytes!
  tx: Transaction!
  collateralRedeemed: BigDecimal!
}

type CollateralRestore @entity {
  id: ID!
  pool: ACOPool2!
  caller: Bytes!
  tx: Transaction!
  amountSold: BigDecimal!
  collateralRestored: BigDecimal!
}

type PoolAccount @entity {
  id: ID!
  pool: ACOPool2!
  account: Bytes!
  balance: BigDecimal!
}